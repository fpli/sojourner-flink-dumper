/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ebay.epic.sojourner.common.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SojWatermark extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7292007330204782717L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SojWatermark\",\"namespace\":\"com.ebay.epic.sojourner.common.model\",\"fields\":[{\"name\":\"watermark\",\"type\":[\"null\",\"long\"],\"doc\":\"unified session watermark\"},{\"name\":\"subtaskIndex\",\"type\":[\"null\",\"int\"],\"doc\":\"subtask index\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SojWatermark> ENCODER =
      new BinaryMessageEncoder<SojWatermark>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SojWatermark> DECODER =
      new BinaryMessageDecoder<SojWatermark>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SojWatermark> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SojWatermark> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SojWatermark>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SojWatermark to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SojWatermark from a ByteBuffer. */
  public static SojWatermark fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** unified session watermark */
  @Deprecated public java.lang.Long watermark;
  /** subtask index */
  @Deprecated public java.lang.Integer subtaskIndex;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SojWatermark() {}

  /**
   * All-args constructor.
   * @param watermark unified session watermark
   * @param subtaskIndex subtask index
   */
  public SojWatermark(java.lang.Long watermark, java.lang.Integer subtaskIndex) {
    this.watermark = watermark;
    this.subtaskIndex = subtaskIndex;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return watermark;
    case 1: return subtaskIndex;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: watermark = (java.lang.Long)value$; break;
    case 1: subtaskIndex = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'watermark' field.
   * @return unified session watermark
   */
  public java.lang.Long getWatermark() {
    return watermark;
  }

  /**
   * Sets the value of the 'watermark' field.
   * unified session watermark
   * @param value the value to set.
   */
  public void setWatermark(java.lang.Long value) {
    this.watermark = value;
  }

  /**
   * Gets the value of the 'subtaskIndex' field.
   * @return subtask index
   */
  public java.lang.Integer getSubtaskIndex() {
    return subtaskIndex;
  }

  /**
   * Sets the value of the 'subtaskIndex' field.
   * subtask index
   * @param value the value to set.
   */
  public void setSubtaskIndex(java.lang.Integer value) {
    this.subtaskIndex = value;
  }

  /**
   * Creates a new SojWatermark RecordBuilder.
   * @return A new SojWatermark RecordBuilder
   */
  public static com.ebay.epic.sojourner.common.model.SojWatermark.Builder newBuilder() {
    return new com.ebay.epic.sojourner.common.model.SojWatermark.Builder();
  }

  /**
   * Creates a new SojWatermark RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SojWatermark RecordBuilder
   */
  public static com.ebay.epic.sojourner.common.model.SojWatermark.Builder newBuilder(com.ebay.epic.sojourner.common.model.SojWatermark.Builder other) {
    return new com.ebay.epic.sojourner.common.model.SojWatermark.Builder(other);
  }

  /**
   * Creates a new SojWatermark RecordBuilder by copying an existing SojWatermark instance.
   * @param other The existing instance to copy.
   * @return A new SojWatermark RecordBuilder
   */
  public static com.ebay.epic.sojourner.common.model.SojWatermark.Builder newBuilder(com.ebay.epic.sojourner.common.model.SojWatermark other) {
    return new com.ebay.epic.sojourner.common.model.SojWatermark.Builder(other);
  }

  /**
   * RecordBuilder for SojWatermark instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SojWatermark>
    implements org.apache.avro.data.RecordBuilder<SojWatermark> {

    /** unified session watermark */
    private java.lang.Long watermark;
    /** subtask index */
    private java.lang.Integer subtaskIndex;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ebay.epic.sojourner.common.model.SojWatermark.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.watermark)) {
        this.watermark = data().deepCopy(fields()[0].schema(), other.watermark);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subtaskIndex)) {
        this.subtaskIndex = data().deepCopy(fields()[1].schema(), other.subtaskIndex);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SojWatermark instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ebay.epic.sojourner.common.model.SojWatermark other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.watermark)) {
        this.watermark = data().deepCopy(fields()[0].schema(), other.watermark);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subtaskIndex)) {
        this.subtaskIndex = data().deepCopy(fields()[1].schema(), other.subtaskIndex);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'watermark' field.
      * unified session watermark
      * @return The value.
      */
    public java.lang.Long getWatermark() {
      return watermark;
    }

    /**
      * Sets the value of the 'watermark' field.
      * unified session watermark
      * @param value The value of 'watermark'.
      * @return This builder.
      */
    public com.ebay.epic.sojourner.common.model.SojWatermark.Builder setWatermark(java.lang.Long value) {
      validate(fields()[0], value);
      this.watermark = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'watermark' field has been set.
      * unified session watermark
      * @return True if the 'watermark' field has been set, false otherwise.
      */
    public boolean hasWatermark() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'watermark' field.
      * unified session watermark
      * @return This builder.
      */
    public com.ebay.epic.sojourner.common.model.SojWatermark.Builder clearWatermark() {
      watermark = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subtaskIndex' field.
      * subtask index
      * @return The value.
      */
    public java.lang.Integer getSubtaskIndex() {
      return subtaskIndex;
    }

    /**
      * Sets the value of the 'subtaskIndex' field.
      * subtask index
      * @param value The value of 'subtaskIndex'.
      * @return This builder.
      */
    public com.ebay.epic.sojourner.common.model.SojWatermark.Builder setSubtaskIndex(java.lang.Integer value) {
      validate(fields()[1], value);
      this.subtaskIndex = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subtaskIndex' field has been set.
      * subtask index
      * @return True if the 'subtaskIndex' field has been set, false otherwise.
      */
    public boolean hasSubtaskIndex() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subtaskIndex' field.
      * subtask index
      * @return This builder.
      */
    public com.ebay.epic.sojourner.common.model.SojWatermark.Builder clearSubtaskIndex() {
      subtaskIndex = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SojWatermark build() {
      try {
        SojWatermark record = new SojWatermark();
        record.watermark = fieldSetFlags()[0] ? this.watermark : (java.lang.Long) defaultValue(fields()[0]);
        record.subtaskIndex = fieldSetFlags()[1] ? this.subtaskIndex : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SojWatermark>
    WRITER$ = (org.apache.avro.io.DatumWriter<SojWatermark>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SojWatermark>
    READER$ = (org.apache.avro.io.DatumReader<SojWatermark>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
